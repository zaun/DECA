#include "util.h"
#include "Vfifo.h"
#include "verilated.h"

// Define our test cases
struct TestCase {
	const char* name;
  uint8_t resetBefore;

  uint8_t i_data;
  uint8_t i_read;
  uint8_t i_write;

  uint8_t o_empty_n;
  uint8_t o_write_error;
  uint8_t o_read_error;
  uint8_t o_data;

  uint8_t addr_read;
  uint8_t addr_write;
  uint8_t addr_next;
  uint8_t empty;
  uint8_t full;
  uint8_t buffer[16];
};

TestCase testCases[] {
  {
    "Should initialize properly", 1,
    0x00, 0, 0,
    0, 0, 0, 0x00,
    0x00, 0x00, 0x01, 1, 0, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  }, {
    "Should write 1st time to fifo", 1,
    0x01, 0, 1,
    1, 0, 0, 0x00,
    0x00, 0x01, 0x02, 0, 0, {0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  }, {
    "Should write 2nd time to fifo", 0,
    0x02, 0, 1,
    1, 0, 0, 0x00,
    0x00, 0x02, 0x03, 0, 0, {0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  }, {
    "Should write 3rd time to fifo", 0,
    0x03, 0, 1,
    1, 0, 0, 0x00,
    0x00, 0x03, 0x04, 0, 0, {0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  }, {
    "Should write 4th time to fifo", 0,
    0x04, 0, 1,
    1, 0, 0, 0x00,
    0x00, 0x04, 0x05, 0, 0, {0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  }, {
    "Should write 5th time to fifo", 0,
    0x05, 0, 1,
    1, 0, 0, 0x00,
    0x00, 0x05, 0x06, 0, 0, {0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  }, {
    "Should write 6th time to fifo", 0,
    0x06, 0, 1,
    1, 0, 0, 0x00,
    0x00, 0x06, 0x07, 0, 0, {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  }, {
    "Should write 7th time to fifo", 0,
    0x07, 0, 1,
    1, 0, 0, 0x00,
    0x00, 0x07, 0x08, 0, 0, {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  }, {
    "Should write 8th time to fifo", 0,
    0x08, 0, 1,
    1, 0, 0, 0x00,
    0x00, 0x08, 0x09, 0, 0, {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  }, {
    "Should write 9th time to fifo", 0,
    0x09, 0, 1,
    1, 0, 0, 0x00,
    0x00, 0x09, 0x0A, 0, 0, {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  }, {
    "Should write 10th time to fifo", 0,
    0x0A, 0, 1,
    1, 0, 0, 0x00,
    0x00, 0x0A, 0x0B, 0, 0, {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  }, {
    "Should write 11th time to fifo", 0,
    0x0B, 0, 1,
    1, 0, 0, 0x00,
    0x00, 0x0B, 0x0C, 0, 0, {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00}
  }, {
    "Should write 12th time to fifo", 0,
    0x0C, 0, 1,
    1, 0, 0, 0x00,
    0x00, 0x0C, 0x0D, 0, 0, {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x00}
  }, {
    "Should write 13th time to fifo", 0,
    0x0D, 0, 1,
    1, 0, 0, 0x00,
    0x00, 0x0D, 0x0E, 0, 0, {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x00, 0x00, 0x00}
  }, {
    "Should write 14th time to fifo", 0,
    0x0E, 0, 1,
    1, 0, 0, 0x00,
    0x00, 0x0E, 0x0F, 0, 0, {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x00, 0x00}
  }, {
    "Should write 15th time to fifo and be full", 0,
    0x0F, 0, 1,
    1, 0, 0, 0x00,
    0x00, 0x0F, 0x00, 0, 1, {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x00}
  }, {
    "Should write 16th time to fifo and fail", 0,
    0x10, 0, 1,
    1, 1, 0, 0x00,
    0x00, 0x0F, 0x00, 0, 1, {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x00}
  }, {
    "Should read 1st from the fifo", 0,
    0x00, 1, 0,
		1, 0, 0, 0x01,
		0x01, 0x0F, 0x00, 0, 0, {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x00}
  }, {
    "Should read 2nd from the fifo", 0,
    0x00, 1, 0,
		1, 0, 0, 0x02,
		0x02, 0x0F, 0x00, 0, 0, {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x00}
  }, {
    "Should write 17th time to fifo", 0,
    0x10, 0, 1,
    1, 0, 0, 0x00,
		0x02, 0x00, 0x01, 0, 0, {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10}
  }, {
    "Should write 18th time to fifo and be full", 0,
    0x11, 0, 1,
    1, 0, 0, 0x00,
		0x02, 0x01, 0x02, 0, 1, {0x11, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10}
  }, {
    "Should write 1st time to fifo", 1,
    0x01, 0, 1,
    1, 0, 0, 0x00,
    0x00, 0x01, 0x02, 0, 0, {0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  }, {
    "Should read 1st from the fifo", 0,
    0x00, 1, 0,
		0, 0, 0, 0x01,
		0x01, 0x01, 0x02, 1, 0, {0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  }, {
    "Should read 2nd from the fifo and fail", 0,
    0x00, 1, 0,
		0, 0, 1, 0x00,
		0x01, 0x01, 0x02, 1, 0, {0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  }
};
// The test runner
int main (int argc, char **argv, char **env) {
  Verilated::commandArgs(argc, argv);

  int numTests = sizeof(testCases)/sizeof(TestCase);
  int failTests = 0;

  printf("\n\nFIFO unit tests\n");
  printf("-----------------\n\n");

  Vfifo* fifo;
  for (int k = 0; k < numTests; k++) {
    TestCase *testCase = &testCases[k];

    // Init the module
    if (testCase->resetBefore) {
      if (fifo) {
        delete fifo;
      }
      fifo = new Vfifo;
      fifo->i_clk_write = 1;
      fifo->eval();
      fifo->i_clk_write = 0;
      fifo->eval();
      fifo->i_clk_read = 1;
      fifo->eval();
      fifo->i_clk_read = 0;
      fifo->eval();
    }

    // Run the test
    fifo->i_data = testCase->i_data;
    fifo->i_read = testCase->i_read;
    fifo->i_write = testCase->i_write;
    fifo->i_clk_write = 1;
    fifo->i_clk_read = 1;
    fifo->eval();
    fifo->i_clk_write = 0;
    fifo->i_clk_read = 0;
    fifo->eval();

    int buffer = -1;
    for (int i=0; i < 16; i++) {
      if (fifo->fifo__DOT__mem[i] != testCase->buffer[i]) {
        buffer = i;
      }
    }

    if (fifo->fifo__DOT__addr_read != testCase->addr_read ||
				fifo->fifo__DOT__addr_write != testCase->addr_write ||
				fifo->fifo__DOT__addr_next != testCase->addr_next ||
				fifo->fifo__DOT__full != testCase->full ||
				fifo->fifo__DOT__empty != testCase->empty ||
				fifo->o_empty_n != testCase->o_empty_n ||
        fifo->o_read_error != testCase->o_read_error ||
        fifo->o_write_error != testCase->o_write_error ||
        buffer != -1) {
      failTests ++;
      printf("(F) %s\n", testCase->name);
      printf("    addr_read 0x%02X expected to be 0x%02X\n", fifo->fifo__DOT__addr_read, testCase->addr_read);
      printf("    addr_write 0x%02X expected to be 0x%02X\n", fifo->fifo__DOT__addr_write, testCase->addr_write);
      printf("    addr_next 0x%02X expected to be 0x%02X\n", fifo->fifo__DOT__addr_next, testCase->addr_next);
      printf("    full %d expected to be %d\n", fifo->fifo__DOT__full, testCase->full);
      printf("    empty %d expected to be %d\n", fifo->fifo__DOT__empty, testCase->empty);
      printf("    o_empty_n %d expected to be %d\n", fifo->o_empty_n, testCase->o_empty_n);
      printf("    o_read_error %d expected to be %d\n", fifo->o_read_error, testCase->o_read_error);
      printf("    o_write_error %d expected to be %d\n", fifo->o_write_error, testCase->o_write_error);
			if (buffer != -1) {
        printf("    buffer[%d] 0x%02X expected to be 0x%02X\n", buffer, fifo->fifo__DOT__mem[buffer], testCase->buffer[buffer]);
      } else {
				printf("    buffer OK\n");
			}
    } else {
      printf("(P) %s\n", testCase->name);
    }
  }

  // Cleanup
  delete fifo;

  // Print a summary
  printf("\n%d of %d failed tests\n\n", failTests, numTests);

  if (failTests > 0) {
    exit(1);
  } else {
    exit(0);
  }
}
